name: Build Windows

on:
  workflow_call:
    inputs:
      version:
        type: string
        required: true
      prefix:
        type: string
        required: true
      build-suffix: # "64" or ""
        type: string
        required: false
      dist-suffix: # "64-bit" or "32-bit"
        type: string
        required: true
      update-suffix: # "x64" or "386"
        type: string
        required: true
      arch:
        type: string
        required: true
      installer-suffix: # "-x64" or ""
        type: string
        required: false

env:
  GOPRIVATE: github.com/getlantern
  S3_BUCKET: lantern
jobs:
    build-desktop:
      permissions:
        contents: "read"
        id-token: "write"
      env:
        version: ${{ inputs.version }}
        prefix: ${{ inputs.prefix }}
      runs-on: ubuntu-20.04
      steps:
      - uses: actions/checkout@v3
        with:
          lfs: true

      - name: Pull LFS objects
        run: git lfs pull

      - name: Setup Go
        uses: actions/setup-go@v3
        with:
          go-version: 1.21

      - name: Granting private modules access
        run: |
          git config --global url."https://${{ secrets.GH_TOKEN }}:x-oauth-basic@github.com/".insteadOf "https://github.com/"

      - name: Repo access
        run: |
          mkdir /tmp/cache
          echo "machine github.com login ${{ secrets.GH_TOKEN }} password x-oauth-basic" > /tmp/cache/.netrc
          chmod 600 /tmp/cache/.netrc

      - name: Setup Sentry CLI
        uses: mathieu-bour/setup-sentry-cli@v1
        with:
          version: latest
          token: ${{ SECRETS.SENTRY_TOKEN }} # from GitHub secrets
          organization: getlantern
          project: android

      - name: Install dependencies
        run: |
          sudo apt-get install -y file build-essential pkg-config
          sudo apt-get install -y mingw-w64 nsis    

      - name: Build liblantern.dll
        if: ${{inputs.update-suffix == '386'}}
        run: |
          make windows

      - name: Build liblantern.dll
        if: ${{inputs.update-suffix == 'x64'}}
        run: |
          make windows64

      - uses: actions/upload-artifact@v3
        with:
          name: libgo-windows-${{inputs.update-suffix}}-build
          if-no-files-found: error
          path: |
            liblantern.dll

      - uses: actions/setup-python@v4
        with:
          python-version: '3.8'

      - name: Install s3cmd
        run: pip install s3cmd

      - name: Set s3cmd permissions
        run: |
          echo "[default]" > "$HOME/.s3cfg"
          echo "access_key = ${{ secrets.AWS_ACCESS_KEY }}" >> "$HOME/.s3cfg"
          echo "secret_key = ${{ secrets.AWS_SECRET_KEY }}" >> "$HOME/.s3cfg"

      - name: Push libgo to S3
        run: s3cmd put --acl-public liblantern.dll "s3://lantern/liblantern-${{inputs.update-suffix}}.dll"

    build-windows:
      needs: build-desktop
      permissions:
        contents: "read"
        id-token: "write"
      env:
        version: ${{ inputs.version }}
        prefix: ${{ inputs.prefix }}
      runs-on: windows-latest
      steps:
        - uses: actions/checkout@v3
          with:
            lfs: true

        # Install Flutter
        - uses: subosito/flutter-action@v2
          with:
            channel: "stable"

        - run: flutter --version

        - name: Setup protoc
          uses: arduino/setup-protoc@v2
          with:
            repo-token: ${{ secrets.GITHUB_TOKEN }}

        - name: Activate protoc-gen-dart plugin
          run: |
            dart pub global activate protoc_plugin

        - name: Download the win build output
          uses: actions/download-artifact@v3
          with:
            name: libgo-windows-${{inputs.update-suffix}}-build

        - name: Copy liblantern.dylib
          run: cp liblantern.dll windows/runner/resources

        - name: Build Flutter app
          run: flutter build windows

        - name: Create archive
          run: |
            ls build/windows
            Compress-Archive "build/windows/${{inputs.arch}}/runner/Release" lantern.zip

        - uses: actions/upload-artifact@v3
          with:
            if-no-files-found: error
            name: windows${{inputs.build-suffix}}-build
            path: lantern.zip

    build-installer:
      needs: build-windows
      permissions:
        contents: "read"
        id-token: "write"
      env:
        version: ${{ inputs.version }}
        prefix: ${{ inputs.prefix }}
      runs-on: ubuntu-20.04

      steps:
        - name: Install dependencies
          run: |
            sudo apt-get install -y file build-essential pkg-config
            sudo apt-get install -y mingw-w64 nsis
        - uses: actions/checkout@v3
        - uses: actions/download-artifact@v3
          with:
            name: windows${{inputs.build-suffix}}-build
        - name: Make installer
          run: |
            pwd
            unzip lantern.zip
            cp installer-resources-lantern/.packaged-lantern.yaml installer-resources-lantern/windows/.packaged-lantern.yaml
            cp installer-resources-lantern/lantern.yaml installer-resources-lantern/windows/lantern.yaml
            cp -r Release/* installer-resources-lantern/windows
            makensis -V1 -DVERSION=${{ inputs.version }} -DAPP_NAME=lantern.exe -DOUT_FILE="lantern-installer${{inputs.installer-suffix}}.exe" installer-resources-lantern/windows/lantern.nsi

        - uses: actions/upload-artifact@v3
          with:
            if-no-files-found: error
            name: windows${{inputs.build-suffix}}-installer-unsigned
            path: installer-resources-lantern/windows/lantern-installer${{inputs.installer-suffix}}.exe

    upload-windows:
      needs: build-windows
      permissions:
        contents: "read"
        id-token: "write"
      env:
        version: ${{ inputs.version }}
        prefix: ${{ inputs.prefix }}
      runs-on: ubuntu-20.04

      steps:
        - name: Download the signed exe
          uses: actions/download-artifact@v3
          with:
            name: windows${{inputs.build-suffix}}-installer-signed

        - uses: actions/download-artifact@v3
          with:
            name: windows${{inputs.build-suffix}}-build-signed
        - name: Install s3cmd
          run: pip install s3cmd

        - name: Set s3cmd permissions
          run: |
            echo "[default]" > "$HOME/.s3cfg"
            echo "access_key = ${{ secrets.AWS_ACCESS_KEY }}" >> "$HOME/.s3cfg"
            echo "secret_key = ${{ secrets.AWS_SECRET_KEY }}" >> "$HOME/.s3cfg"

        - name: Push binaries to s3
          
          env:
            VERSION: "${{ inputs.version }}"
            dist_versionless: "${{inputs.prefix}}-${{inputs.dist-suffix}}.exe"
            dist: "${{inputs.prefix}}-${{inputs.version}}-${{inputs.dist-suffix}}.exe"
            update: "lantern_update_windows_${{inputs.update-suffix}}-${{inputs.version}}.bz2"

          run: |
            ls -l
            cat lantern.exe | bzip2 > ${{ env.update }}
            mv lantern${{inputs.installer-suffix}}.exe ${{ env.dist }}
            cp ${{ env.dist }} ${{ env.dist_versionless }}

            shasum -a 256 ${{ env.dist }} | cut -d " " -f 1 > ${{ env.dist }}.sha256
            shasum -a 256 ${{ env.update }} | cut -d " " -f 1 > ${{ env.update }}.sha256
            cp ${{ env.dist }}.sha256 ${{ env.dist_versionless }}.sha256
            ls -l

            s3cmd put --acl-public ${{ env.dist }} ${{ env.update }} ${{ env.update }}.sha256 ${{ env.dist }}.sha256 ${{ env.dist_versionless }}.sha256 ${{ env.dist_versionless }} "s3://lantern"

