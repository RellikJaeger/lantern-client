name: Build Windows

on:
  workflow_call:
    inputs:
      version:
        type: string
        required: true
      prefix:
        type: string
        required: true
      build-suffix: # "64" or ""
        type: string
        required: false
      dist-suffix: # "64-bit" or "32-bit"
        type: string
        required: true
      update-suffix: # "x64" or "386"
        type: string
        required: true
      installer-suffix: # "-x64" or ""
        type: string
        required: false

env:
  GOPRIVATE: github.com/getlantern
  S3_BUCKET: lantern
jobs:
    build-desktop:
      permissions:
        contents: "read"
        id-token: "write"
      env:
        version: ${{ inputs.version }}
        prefix: ${{ inputs.prefix }}
      runs-on: ubuntu-20.04
      steps:
      - uses: actions/checkout@v3
        with:
          lfs: true

      - name: Pull LFS objects
        run: git lfs pull

      - name: Setup Go
        uses: actions/setup-go@v3
        with:
          go-version: 1.21

      - name: Granting private modules access
        run: |
          git config --global url."https://${{ secrets.GH_TOKEN }}:x-oauth-basic@github.com/".insteadOf "https://github.com/"

      - name: Repo access
        run: |
          mkdir /tmp/cache
          echo "machine github.com login ${{ secrets.GH_TOKEN }} password x-oauth-basic" > /tmp/cache/.netrc
          chmod 600 /tmp/cache/.netrc

      - name: Setup Sentry CLI
        uses: mathieu-bour/setup-sentry-cli@v1
        with:
          version: latest
          token: ${{ SECRETS.SENTRY_TOKEN }} # from GitHub secrets
          organization: getlantern
          project: android

      - name: Install dependencies
        run: |
          sudo apt-get install -y file build-essential pkg-config
          sudo apt-get install -y mingw-w64 nsis    

      - name: Build liblantern.dylib
        if: ${{inputs.update-suffix}} == '386'
        run: |
          CGO_ENABLED=1 CC=i686-w64-mingw32-gcc CXX=i686-w64-mingw32-g++ GOOS=windows GOARCH=386 go build -buildmode=c-shared -o desktop/liblantern.dylib desktop/lib.go

      - name: Build liblantern.dylib
        if: ${{inputs.update-suffix}} == 'x64'
        run: |
          CGO_ENABLED=1 CC=x86_64-w64-mingw32-gcc CXX=x86_64-w64-mingw32-g++ GOOS=windows GOARCH=amd64 go build -buildmode=c-shared -o desktop/liblantern.dylib desktop/lib.go

      - uses: actions/upload-artifact@v3
        with:
          name: libgo-windows-${{inputs.update-suffix}}-build
          if-no-files-found: error
          path: |
            desktop/liblantern.dylib

    build-windows:
      needs: build-desktop
      permissions:
        contents: "read"
        id-token: "write"
      env:
        version: ${{ inputs.version }}
        prefix: ${{ inputs.prefix }}
      runs-on: windows-latest
      steps:
        - uses: actions/checkout@v3
          with:
            lfs: true

        # Install Flutter
        - uses: subosito/flutter-action@v2
          with:
            channel: "stable"

        - run: flutter --version

        - name: Setup protoc
          uses: arduino/setup-protoc@v2
          with:
            repo-token: ${{ secrets.GITHUB_TOKEN }}

        - name: Activate protoc-gen-dart plugin
          run: |
            dart pub global activate protoc_plugin

        - name: Download the win build output
          uses: actions/download-artifact@v3
          with:
            name: libgo-windows-${{inputs.update-suffix}}-build

        - name: Build Flutter app
          run: flutter build windows

        - uses: actions/upload-artifact@v3
          with:
            if-no-files-found: error
            name: windows${{inputs.build-suffix}}-installer-unsigned
            path: build/windows/${{inputs.update-suffix}}/runner/Release/androidlantern.exe

    sign-installer:
      needs: build-windows
      permissions:
        contents: "read"
        id-token: "write"
      env:
        version: ${{ inputs.version }}
        prefix: ${{ inputs.prefix }}
      runs-on: windows-latest
      steps:
        - name: Download the win build output
          uses: actions/download-artifact@v3
          with:
            name: windows${{inputs.build-suffix}}-installer-unsigned

        - name: Sign EXE with Azure Code Signing
          uses: azure/azure-code-signing-action@v0.2.15
          with:
            azure-tenant-id: ${{ secrets.AZURE_TENANT_ID }}
            azure-client-id: ${{ secrets.AZURE_CLIENT_ID }}
            azure-client-secret: ${{ secrets.AZURE_CLIENT_SECRET }}
            endpoint: https://wus2.codesigning.azure.net/
            code-signing-account-name: code-signing
            certificate-profile-name: Lantern
            files-folder: ${{ github.workspace }}\
            files-folder-filter: exe
            file-digest: SHA256
            timestamp-rfc3161: http://timestamp.acs.microsoft.com
            timestamp-digest: SHA256

        - uses: actions/upload-artifact@v3
          with:
            name: windows${{inputs.build-suffix}}-installer-signed
            path: build/windows/${{inputs.update-suffix}}/runner/Release/androidlantern.exe
