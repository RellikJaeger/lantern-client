// Objective-C API for talking to github.com/getlantern/android-lantern/internalsdk Go package.
//   gobind -lang=objc github.com/getlantern/android-lantern/internalsdk
//
// File is generated by gobind. Do not edit.

#ifndef __Internalsdk_H__
#define __Internalsdk_H__

@import Foundation;
#include "ref.h"
#include "Universe.objc.h"

#include "Minisql.objc.h"

@class InternalsdkEmailMessage;
@class InternalsdkEventChannel;
@class InternalsdkFlutterMethodChannel;
@class InternalsdkReplicaServer;
@class InternalsdkStartResult;
@class InternalsdkSurveyInfo;
@protocol InternalsdkAdProvider;
@class InternalsdkAdProvider;
@protocol InternalsdkAdSettings;
@class InternalsdkAdSettings;
@protocol InternalsdkDeviceInfo;
@class InternalsdkDeviceInfo;
@protocol InternalsdkEmailResponseHandler;
@class InternalsdkEmailResponseHandler;
@protocol InternalsdkEventSink;
@class InternalsdkEventSink;
@protocol InternalsdkGeoCallback;
@class InternalsdkGeoCallback;
@protocol InternalsdkModel;
@class InternalsdkModel;
@protocol InternalsdkReceiveStream;
@class InternalsdkReceiveStream;
@protocol InternalsdkSession;
@class InternalsdkSession;
@protocol InternalsdkSettings;
@class InternalsdkSettings;
@protocol InternalsdkUpdater;
@class InternalsdkUpdater;

@protocol InternalsdkAdProvider <NSObject>
- (NSString* _Nonnull)getInterstitialZoneID;
- (NSString* _Nonnull)getNativeBannerZoneID;
- (NSString* _Nonnull)getStandardBannerZoneID;
- (BOOL)shouldShowAd;
@end

@protocol InternalsdkAdSettings <NSObject>
/**
 * GetAdProvider gets an ad provider if and only if ads are enabled based on the passed parameters.
 */
- (id<InternalsdkAdProvider> _Nullable)getAdProvider:(BOOL)isPro countryCode:(NSString* _Nullable)countryCode daysSinceInstalled:(long)daysSinceInstalled error:(NSError* _Nullable* _Nullable)error;
@end

@protocol InternalsdkDeviceInfo <NSObject>
- (NSString* _Nonnull)deviceID;
- (NSString* _Nonnull)hardware;
- (NSString* _Nonnull)model;
- (long)sdkVersion;
- (NSString* _Nonnull)userID;
@end

@protocol InternalsdkEmailResponseHandler <NSObject>
- (void)onError:(NSString* _Nullable)errMsg;
- (void)onSuccess;
@end

@protocol InternalsdkEventSink <NSObject>
- (void)error:(NSString* _Nullable)errorCode errorMessage:(NSString* _Nullable)errorMessage errorDetails:(NSString* _Nullable)errorDetails;
- (void)success:(NSString* _Nullable)event;
@end

@protocol InternalsdkGeoCallback <NSObject>
- (void)setCity:(NSString* _Nullable)p0;
- (void)setCountry:(NSString* _Nullable)p0;
- (void)setIP:(NSString* _Nullable)p0;
- (void)setLatitude:(double)p0;
- (void)setLongitude:(double)p0;
- (void)setRegion:(NSString* _Nullable)p0;
@end

@protocol InternalsdkModel <NSObject>
- (MinisqlValue* _Nullable)invokeMethod:(NSString* _Nullable)method arguments:(id<MinisqlValues> _Nullable)arguments error:(NSError* _Nullable* _Nullable)error;
// skipped method Model.Subscribe with unsupported parameter or return types

- (BOOL)unsubscribe:(NSString* _Nullable)id_ error:(NSError* _Nullable* _Nullable)error;
@end

@protocol InternalsdkReceiveStream <NSObject>
- (void)onDataReceived:(NSString* _Nullable)data;
@end

@protocol InternalsdkSession <NSObject>
- (BOOL)bandwidthUpdate:(long)p0 p1:(long)p1 p2:(long)p2 p3:(long)p3 error:(NSError* _Nullable* _Nullable)error;
- (NSString* _Nonnull)code:(NSError* _Nullable* _Nullable)error;
- (NSString* _Nonnull)currency:(NSError* _Nullable* _Nullable)error;
- (NSString* _Nonnull)deviceOS:(NSError* _Nullable* _Nullable)error;
- (NSString* _Nonnull)email:(NSError* _Nullable* _Nullable)error;
- (BOOL)forceReplica;
- (NSString* _Nonnull)getAppName;
- (NSString* _Nonnull)getCountryCode:(NSError* _Nullable* _Nullable)error;
- (NSString* _Nonnull)getDNSServer:(NSError* _Nullable* _Nullable)error;
- (NSString* _Nonnull)getDeviceID:(NSError* _Nullable* _Nullable)error;
- (NSString* _Nonnull)getForcedCountryCode:(NSError* _Nullable* _Nullable)error;
- (NSString* _Nonnull)getTimeZone:(NSError* _Nullable* _Nullable)error;
- (NSString* _Nonnull)getToken:(NSError* _Nullable* _Nullable)error;
- (BOOL)getUserID:(int64_t* _Nullable)ret0_ error:(NSError* _Nullable* _Nullable)error;
- (BOOL)isPlayVersion:(BOOL* _Nullable)ret0_ error:(NSError* _Nullable* _Nullable)error;
- (BOOL)isProUser:(BOOL* _Nullable)ret0_ error:(NSError* _Nullable* _Nullable)error;
- (NSString* _Nonnull)locale:(NSError* _Nullable* _Nullable)error;
- (NSString* _Nonnull)provider:(NSError* _Nullable* _Nullable)error;
/**
 * workaround for lack of any sequence types in gomobile bind... ;_;
used to implement GetInternalHeaders() map[string]string
Should return a JSON encoded map[string]string {"key":"val","key2":"val", ...}
 */
- (NSString* _Nonnull)serializedInternalHeaders:(NSError* _Nullable* _Nullable)error;
- (void)setChatEnabled:(BOOL)p0;
- (BOOL)setCountry:(NSString* _Nullable)p0 error:(NSError* _Nullable* _Nullable)error;
- (void)setReplicaAddr:(NSString* _Nullable)p0;
- (BOOL)setStaging:(BOOL)p0 error:(NSError* _Nullable* _Nullable)error;
- (BOOL)splitTunnelingEnabled:(BOOL* _Nullable)ret0_ error:(NSError* _Nullable* _Nullable)error;
- (BOOL)updateAdSettings:(id<InternalsdkAdSettings> _Nullable)p0 error:(NSError* _Nullable* _Nullable)error;
- (BOOL)updateStats:(NSString* _Nullable)p0 p1:(NSString* _Nullable)p1 p2:(NSString* _Nullable)p2 p3:(long)p3 p4:(long)p4 p5:(BOOL)p5 error:(NSError* _Nullable* _Nullable)error;
@end

@protocol InternalsdkSettings <NSObject>
- (NSString* _Nonnull)getHttpProxyHost;
- (long)getHttpProxyPort;
- (BOOL)stickyConfig;
- (long)timeoutMillis;
@end

@protocol InternalsdkUpdater <NSObject>
- (void)progress:(long)p0;
@end

/**
 * EmailMessage exposes the type email.Message as part of this package.
 */
@interface InternalsdkEmailMessage : NSObject <goSeqRefInterface> {
}
@property(strong, readonly) _Nonnull id _ref;

- (nonnull instancetype)initWithRef:(_Nonnull id)ref;
- (nonnull instancetype)init;
@property (nonatomic) NSString* _Nonnull template;
@property (nonatomic) NSString* _Nonnull from;
@property (nonatomic) NSString* _Nonnull to;
@property (nonatomic) NSString* _Nonnull cc;
@property (nonatomic) NSString* _Nonnull subject;
// skipped field EmailMessage.Vars with unsupported type: map[string]interface{}

@property (nonatomic) NSData* _Nullable settingsData;
@property (nonatomic) NSString* _Nonnull maxLogSize;
@property (nonatomic) NSData* _Nullable logs;
@property (nonatomic) NSData* _Nullable diagnosticsYAML;
@property (nonatomic) NSData* _Nullable proxyCapture;
@property (nonatomic) NSData* _Nullable proxies;
/**
 * PutInt sets an integer variable
 */
- (void)putInt:(NSString* _Nullable)key val:(long)val;
/**
 * PutString sets a string variable
 */
- (void)putString:(NSString* _Nullable)key val:(NSString* _Nullable)val;
/**
 * Send sends this EmailMessage using the email package.
 */
- (void)send:(id<InternalsdkEmailResponseHandler> _Nullable)handler;
@end

@interface InternalsdkEventChannel : NSObject <goSeqRefInterface> {
}
@property(strong, readonly) _Nonnull id _ref;

- (nonnull instancetype)initWithRef:(_Nonnull id)ref;
- (nullable instancetype)init:(NSString* _Nullable)channelName;
- (void)invokeOnListen:(NSString* _Nullable)arguments;
- (void)setReceiveStream:(id<InternalsdkReceiveStream> _Nullable)receiveStream;
@end

@interface InternalsdkFlutterMethodChannel : NSObject <goSeqRefInterface> {
}
@property(strong, readonly) _Nonnull id _ref;

- (nonnull instancetype)initWithRef:(_Nonnull id)ref;
// skipped constructor FlutterMethodChannel.NewFlutterMethodChannel with unsupported parameter or return types

- (NSString* _Nonnull)invokeMethod:(NSString* _Nullable)name argument:(NSString* _Nullable)argument error:(NSError* _Nullable* _Nullable)error;
@end

/**
 * Replica HTTP Server that handles Replica API requests on localhost at a random port.
 */
@interface InternalsdkReplicaServer : NSObject <goSeqRefInterface> {
}
@property(strong, readonly) _Nonnull id _ref;

- (nonnull instancetype)initWithRef:(_Nonnull id)ref;
- (nonnull instancetype)init;
@property (nonatomic) NSString* _Nonnull configDir;
// skipped field ReplicaServer.Flashlight with unsupported type: *github.com/getlantern/flashlight/v7.Flashlight

@property (nonatomic) id<InternalsdkSession> _Nullable session;
// skipped field ReplicaServer.UserConfig with unsupported type: github.com/getlantern/flashlight/v7/common.UserConfig

/**
 * Checks whether Replica should be enabled and lazily starts the server if necessary.

If enabled, the server is started lazily and the server's random address is reported to Session.SetReplicaAddr.
If disabled after having been enabled, the server keeps running and ReplicaAddr remains set to its old value.
 */
- (void)checkEnabled;
@end

/**
 * StartResult provides information about the started Lantern
 */
@interface InternalsdkStartResult : NSObject <goSeqRefInterface> {
}
@property(strong, readonly) _Nonnull id _ref;

- (nonnull instancetype)initWithRef:(_Nonnull id)ref;
- (nonnull instancetype)init;
@property (nonatomic) NSString* _Nonnull httpAddr;
@property (nonatomic) NSString* _Nonnull sockS5Addr;
@property (nonatomic) NSString* _Nonnull dnsGrabAddr;
@end

@interface InternalsdkSurveyInfo : NSObject <goSeqRefInterface> {
}
@property(strong, readonly) _Nonnull id _ref;

- (nonnull instancetype)initWithRef:(_Nonnull id)ref;
- (nonnull instancetype)init;
@property (nonatomic) BOOL enabled;
@property (nonatomic) double probability;
@property (nonatomic) NSString* _Nonnull campaign;
@property (nonatomic) NSString* _Nonnull url;
@property (nonatomic) NSString* _Nonnull message;
@property (nonatomic) NSString* _Nonnull thanks;
@property (nonatomic) NSString* _Nonnull button;
@end

@interface Internalsdk : NSObject
/**
 * This gets set at build time
 */
+ (NSString* _Nonnull) applicationVersion;
+ (void) setApplicationVersion:(NSString* _Nonnull)v;

/**
 * This gets set at build time
 */
+ (NSString* _Nonnull) revisionDate;
+ (void) setRevisionDate:(NSString* _Nonnull)v;

@end

/**
 * AllocateRelay allocates a relay location at which peers can relay WebRTC traffic to us.
If successful, it starts relaying traffic to/from the localAddr and returns the URL at which
peers should connect in order to start relaying.
 */
FOUNDATION_EXPORT NSString* _Nonnull InternalsdkAllocateRelayAddress(NSString* _Nullable localAddr, NSError* _Nullable* _Nullable error);

/**
 * CheckForUpdates checks to see if a new version of Lantern is available
 */
FOUNDATION_EXPORT NSString* _Nonnull InternalsdkCheckForUpdates(id<InternalsdkDeviceInfo> _Nullable deviceInfo, NSError* _Nullable* _Nullable error);

FOUNDATION_EXPORT void InternalsdkDebug(NSString* _Nullable tag, NSString* _Nullable msg);

/**
 * DownloadUpdate downloads the latest APK from the given url to the apkPath
file destination.
 */
FOUNDATION_EXPORT BOOL InternalsdkDownloadUpdate(id<InternalsdkDeviceInfo> _Nullable deviceInfo, NSString* _Nullable url, NSString* _Nullable apkPath, id<InternalsdkUpdater> _Nullable updater);

FOUNDATION_EXPORT void InternalsdkError(NSString* _Nullable tag, NSString* _Nullable msg);

FOUNDATION_EXPORT InternalsdkFlutterMethodChannel* _Nullable InternalsdkEventModelChannel(void);

/**
 * InstallFinished is called after an update successfully installs or fails to
and records ops related to it
 */
FOUNDATION_EXPORT void InternalsdkInstallFinished(id<InternalsdkDeviceInfo> _Nullable deviceInfo, BOOL success);

FOUNDATION_EXPORT InternalsdkEventChannel* _Nullable InternalsdkNewEventChannel(NSString* _Nullable channelName);

// skipped function NewFlutterMethodChannel with unsupported parameter or return types


FOUNDATION_EXPORT id<InternalsdkModel> _Nullable InternalsdkNewModel(NSString* _Nullable schema, id<MinisqlDB> _Nullable mdb, NSError* _Nullable* _Nullable error);

// skipped function NewReplicaServer with unsupported parameter or return types


FOUNDATION_EXPORT NSString* _Nonnull InternalsdkRelayTo(NSString* _Nullable relayAddr, NSError* _Nullable* _Nullable error);

/**
 * Get the version number of the Go library.
 */
FOUNDATION_EXPORT NSString* _Nonnull InternalsdkSDKVersion(void);

FOUNDATION_EXPORT BOOL InternalsdkSendIssueReport(id<InternalsdkSession> _Nullable session, NSString* _Nullable issueType, NSString* _Nullable description, NSString* _Nullable subscriptionLevel, NSString* _Nullable userEmail, NSString* _Nullable device, NSString* _Nullable model, NSString* _Nullable osVersion, NSError* _Nullable* _Nullable error);

FOUNDATION_EXPORT InternalsdkFlutterMethodChannel* _Nullable InternalsdkSessionModelChannel(void);

/**
 * SetGetGeoInfo set's the client's current geo info on the given GeoCallback (if available).
 */
FOUNDATION_EXPORT void InternalsdkSetGeoInfo(id<InternalsdkGeoCallback> _Nullable cb);

/**
 * Start starts a HTTP and SOCKS proxies at random addresses. It blocks up till
the given timeout waiting for the proxy to listen, and returns the addresses
at which it is listening (HTTP, SOCKS). If the proxy doesn't start within the
given timeout, this method returns an error.

If a Lantern proxy is already running within this process, that proxy is
reused.

Note - this does not wait for the entire initialization sequence to finish,
just for the proxy to be listening. Once the proxy is listening, one can
start to use it, even as it finishes its initialization sequence. However,
initial activity may be slow, so clients with low read timeouts may
time out.
 */
FOUNDATION_EXPORT InternalsdkStartResult* _Nullable InternalsdkStart(NSString* _Nullable configDir, NSString* _Nullable locale, id<InternalsdkSettings> _Nullable settings, id<InternalsdkSession> _Nullable wrappedSession, NSError* _Nullable* _Nullable error);

/**
 * StopTun2Socks stops the current tun device.
 */
FOUNDATION_EXPORT void InternalsdkStopTun2Socks(void);

/**
 * Tun2Socks wraps the TUN device identified by fd with an ipproxy server that
does the following:

1. dns packets (any UDP packets to port 53) are routed to dnsGrabAddr
2. All other udp packets are routed directly to their destination
3. All TCP traffic is routed through the Lantern proxy at the given socksAddr.
 */
FOUNDATION_EXPORT BOOL InternalsdkTun2Socks(long fd, NSString* _Nullable socksAddr, NSString* _Nullable dnsGrabAddr, long mtu, id<InternalsdkSession> _Nullable wrappedSession, NSError* _Nullable* _Nullable error);

@class InternalsdkAdProvider;

@class InternalsdkAdSettings;

@class InternalsdkDeviceInfo;

@class InternalsdkEmailResponseHandler;

@class InternalsdkEventSink;

@class InternalsdkGeoCallback;

@class InternalsdkModel;

@class InternalsdkReceiveStream;

@class InternalsdkSession;

@class InternalsdkSettings;

@class InternalsdkUpdater;

/**
 * AdProvider provides information for displaying an ad and makes decisions on whether or not to display it.
 */
@interface InternalsdkAdProvider : NSObject <goSeqRefInterface, InternalsdkAdProvider> {
}
@property(strong, readonly) _Nonnull id _ref;

- (nonnull instancetype)initWithRef:(_Nonnull id)ref;
- (NSString* _Nonnull)getInterstitialZoneID;
- (NSString* _Nonnull)getNativeBannerZoneID;
- (NSString* _Nonnull)getStandardBannerZoneID;
- (BOOL)shouldShowAd;
@end

/**
 * AdSettings is an interface for retrieving mobile ad settings from the
global config
 */
@interface InternalsdkAdSettings : NSObject <goSeqRefInterface, InternalsdkAdSettings> {
}
@property(strong, readonly) _Nonnull id _ref;

- (nonnull instancetype)initWithRef:(_Nonnull id)ref;
/**
 * GetAdProvider gets an ad provider if and only if ads are enabled based on the passed parameters.
 */
- (id<InternalsdkAdProvider> _Nullable)getAdProvider:(BOOL)isPro countryCode:(NSString* _Nullable)countryCode daysSinceInstalled:(long)daysSinceInstalled error:(NSError* _Nullable* _Nullable)error;
@end

/**
 * DeviceInfo provides information about a device for sending with ops when
downloading and installing auto-updates
 */
@interface InternalsdkDeviceInfo : NSObject <goSeqRefInterface, InternalsdkDeviceInfo> {
}
@property(strong, readonly) _Nonnull id _ref;

- (nonnull instancetype)initWithRef:(_Nonnull id)ref;
- (NSString* _Nonnull)deviceID;
- (NSString* _Nonnull)hardware;
- (NSString* _Nonnull)model;
- (long)sdkVersion;
- (NSString* _Nonnull)userID;
@end

/**
 * EmailResponseHandler is used to return a response to the client in the
event there's an error sending an email
 */
@interface InternalsdkEmailResponseHandler : NSObject <goSeqRefInterface, InternalsdkEmailResponseHandler> {
}
@property(strong, readonly) _Nonnull id _ref;

- (nonnull instancetype)initWithRef:(_Nonnull id)ref;
- (void)onError:(NSString* _Nullable)errMsg;
- (void)onSuccess;
@end

@interface InternalsdkEventSink : NSObject <goSeqRefInterface, InternalsdkEventSink> {
}
@property(strong, readonly) _Nonnull id _ref;

- (nonnull instancetype)initWithRef:(_Nonnull id)ref;
- (void)error:(NSString* _Nullable)errorCode errorMessage:(NSString* _Nullable)errorMessage errorDetails:(NSString* _Nullable)errorDetails;
- (void)success:(NSString* _Nullable)event;
@end

@interface InternalsdkGeoCallback : NSObject <goSeqRefInterface, InternalsdkGeoCallback> {
}
@property(strong, readonly) _Nonnull id _ref;

- (nonnull instancetype)initWithRef:(_Nonnull id)ref;
- (void)setCity:(NSString* _Nullable)p0;
- (void)setCountry:(NSString* _Nullable)p0;
- (void)setIP:(NSString* _Nullable)p0;
- (void)setLatitude:(double)p0;
- (void)setLongitude:(double)p0;
- (void)setRegion:(NSString* _Nullable)p0;
@end

@interface InternalsdkModel : NSObject <goSeqRefInterface, InternalsdkModel> {
}
@property(strong, readonly) _Nonnull id _ref;

- (nonnull instancetype)initWithRef:(_Nonnull id)ref;
- (MinisqlValue* _Nullable)invokeMethod:(NSString* _Nullable)method arguments:(id<MinisqlValues> _Nullable)arguments error:(NSError* _Nullable* _Nullable)error;
// skipped method Model.Subscribe with unsupported parameter or return types

- (BOOL)unsubscribe:(NSString* _Nullable)id_ error:(NSError* _Nullable* _Nullable)error;
@end

@interface InternalsdkReceiveStream : NSObject <goSeqRefInterface, InternalsdkReceiveStream> {
}
@property(strong, readonly) _Nonnull id _ref;

- (nonnull instancetype)initWithRef:(_Nonnull id)ref;
- (void)onDataReceived:(NSString* _Nullable)data;
@end

/**
 * Session provides an interface for interacting with the Android Java/Kotlin code.
Note - all methods return an error so that Go has the opportunity to inspect any exceptions
thrown from the Java code. If a method interface doesn't include an error, exceptions on the
Java side immediately result in a panic from which Go cannot recover.
 */
@interface InternalsdkSession : NSObject <goSeqRefInterface, InternalsdkSession> {
}
@property(strong, readonly) _Nonnull id _ref;

- (nonnull instancetype)initWithRef:(_Nonnull id)ref;
- (BOOL)bandwidthUpdate:(long)p0 p1:(long)p1 p2:(long)p2 p3:(long)p3 error:(NSError* _Nullable* _Nullable)error;
- (NSString* _Nonnull)code:(NSError* _Nullable* _Nullable)error;
- (NSString* _Nonnull)currency:(NSError* _Nullable* _Nullable)error;
- (NSString* _Nonnull)deviceOS:(NSError* _Nullable* _Nullable)error;
- (NSString* _Nonnull)email:(NSError* _Nullable* _Nullable)error;
- (BOOL)forceReplica;
- (NSString* _Nonnull)getAppName;
- (NSString* _Nonnull)getCountryCode:(NSError* _Nullable* _Nullable)error;
- (NSString* _Nonnull)getDNSServer:(NSError* _Nullable* _Nullable)error;
- (NSString* _Nonnull)getDeviceID:(NSError* _Nullable* _Nullable)error;
- (NSString* _Nonnull)getForcedCountryCode:(NSError* _Nullable* _Nullable)error;
- (NSString* _Nonnull)getTimeZone:(NSError* _Nullable* _Nullable)error;
- (NSString* _Nonnull)getToken:(NSError* _Nullable* _Nullable)error;
- (BOOL)getUserID:(int64_t* _Nullable)ret0_ error:(NSError* _Nullable* _Nullable)error;
- (BOOL)isPlayVersion:(BOOL* _Nullable)ret0_ error:(NSError* _Nullable* _Nullable)error;
- (BOOL)isProUser:(BOOL* _Nullable)ret0_ error:(NSError* _Nullable* _Nullable)error;
- (NSString* _Nonnull)locale:(NSError* _Nullable* _Nullable)error;
- (NSString* _Nonnull)provider:(NSError* _Nullable* _Nullable)error;
/**
 * workaround for lack of any sequence types in gomobile bind... ;_;
used to implement GetInternalHeaders() map[string]string
Should return a JSON encoded map[string]string {"key":"val","key2":"val", ...}
 */
- (NSString* _Nonnull)serializedInternalHeaders:(NSError* _Nullable* _Nullable)error;
- (void)setChatEnabled:(BOOL)p0;
- (BOOL)setCountry:(NSString* _Nullable)p0 error:(NSError* _Nullable* _Nullable)error;
- (void)setReplicaAddr:(NSString* _Nullable)p0;
- (BOOL)setStaging:(BOOL)p0 error:(NSError* _Nullable* _Nullable)error;
- (BOOL)splitTunnelingEnabled:(BOOL* _Nullable)ret0_ error:(NSError* _Nullable* _Nullable)error;
- (BOOL)updateAdSettings:(id<InternalsdkAdSettings> _Nullable)p0 error:(NSError* _Nullable* _Nullable)error;
- (BOOL)updateStats:(NSString* _Nullable)p0 p1:(NSString* _Nullable)p1 p2:(NSString* _Nullable)p2 p3:(long)p3 p4:(long)p4 p5:(BOOL)p5 error:(NSError* _Nullable* _Nullable)error;
@end

@interface InternalsdkSettings : NSObject <goSeqRefInterface, InternalsdkSettings> {
}
@property(strong, readonly) _Nonnull id _ref;

- (nonnull instancetype)initWithRef:(_Nonnull id)ref;
- (NSString* _Nonnull)getHttpProxyHost;
- (long)getHttpProxyPort;
- (BOOL)stickyConfig;
- (long)timeoutMillis;
@end

@interface InternalsdkUpdater : NSObject <goSeqRefInterface, InternalsdkUpdater> {
}
@property(strong, readonly) _Nonnull id _ref;

- (nonnull instancetype)initWithRef:(_Nonnull id)ref;
- (void)progress:(long)p0;
@end

#endif
